# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FrmMain_designer.ui'
#
# Created by: PyQt5 UI code generator 5.7
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1239, 755)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.graphicsView = QtWidgets.QGraphicsView(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setObjectName("graphicsView")
        self.frame = QtWidgets.QFrame(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.TXT_FILENAME = QtWidgets.QLineEdit(self.frame)
        self.TXT_FILENAME.setObjectName("TXT_FILENAME")
        self.horizontalLayout.addWidget(self.TXT_FILENAME)
        self.BTN_FILENAME = QtWidgets.QToolButton(self.frame)
        self.BTN_FILENAME.setObjectName("BTN_FILENAME")
        self.horizontalLayout.addWidget(self.BTN_FILENAME)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.label = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.NUM_MERGE = QtWidgets.QSpinBox(self.frame)
        self.NUM_MERGE.setAccelerated(True)
        self.NUM_MERGE.setObjectName("NUM_MERGE")
        self.verticalLayout.addWidget(self.NUM_MERGE)
        self.label_2 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.CHK_TRANSITION = QtWidgets.QCheckBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CHK_TRANSITION.sizePolicy().hasHeightForWidth())
        self.CHK_TRANSITION.setSizePolicy(sizePolicy)
        self.CHK_TRANSITION.setObjectName("CHK_TRANSITION")
        self.verticalLayout.addWidget(self.CHK_TRANSITION)
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(20, 432, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.BTN_WHATS_THIS = QtWidgets.QPushButton(self.frame)
        self.BTN_WHATS_THIS.setObjectName("BTN_WHATS_THIS")
        self.verticalLayout.addWidget(self.BTN_WHATS_THIS)
        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1239, 22))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_Open = QtWidgets.QAction(MainWindow)
        self.action_Open.setObjectName("action_Open")
        self.actionE_xit = QtWidgets.QAction(MainWindow)
        self.actionE_xit.setObjectName("actionE_xit")
        self.menu_File.addAction(self.action_Open)
        self.menu_File.addAction(self.actionE_xit)
        self.menubar.addAction(self.menu_File.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.graphicsView.setWhatsThis(_translate("MainWindow", "The plot is shown in this area"))
        self.label_3.setStatusTip(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.label_3.setWhatsThis(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.label_3.setText(_translate("MainWindow", "Filename"))
        self.TXT_FILENAME.setStatusTip(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.TXT_FILENAME.setWhatsThis(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.BTN_FILENAME.setStatusTip(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.BTN_FILENAME.setWhatsThis(_translate("MainWindow", "Name of the file to load. This should be BLAST output in TSV format."))
        self.BTN_FILENAME.setText(_translate("MainWindow", "..."))
        self.label.setStatusTip(_translate("MainWindow", "How close two points in a sequence must be to be considered the same."))
        self.label.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>How close two points in a sequence must be to be considered the same.</p><p>Points are merged using HCA. Sequence starts are always drawn from the lowest of the set of merged points, whilst sequence ends are always drawn from the highest.</p></body></html>"))
        self.label.setText(_translate("MainWindow", "Merge tolerance"))
        self.NUM_MERGE.setStatusTip(_translate("MainWindow", "How close two points in a sequence must be to be considered the same."))
        self.NUM_MERGE.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>How close two points in a sequence must be to be considered the same.</p><p>Points are merged using HCA. Sequence starts are always drawn from the lowest of the set of merged points, whilst sequence ends are always drawn from the highest.</p></body></html>"))
        self.label_2.setStatusTip(_translate("MainWindow", "Controls whether BLAST targets that share a connection are grouped together"))
        self.label_2.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>When checked, all BLAST targets that share a connection are grouped together</p><p>e.g.<br/>for BLASTs {<span style=\" font-style:italic;\">A-B, A-C, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}</p><p>for BLASTs {<span style=\" font-style:italic;\">A-B, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}<br/><br/>When unchecked, only BLAST targets that share a direct connection are grouped.</p><p>e.g.<br/>for BLASTs {<span style=\" font-style:italic;\">A-B, A-C, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}</p><p>for BLASTs {<span style=\" font-style:italic;\">A-B, B-C</span>} there are two groups, {<span style=\" font-style:italic;\">A, B</span>} and {<span style=\" font-style:italic;\">B, C</span>}<br/>This leads to more lines in the plot, which can be confusing, but allows non-transitive regions to be identified.</p><p><br/></p><p><br/></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "Transitive"))
        self.CHK_TRANSITION.setStatusTip(_translate("MainWindow", "Controls whether BLAST targets that share a connection are grouped together"))
        self.CHK_TRANSITION.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>When checked, all BLAST targets that share a connection are grouped together</p><p>e.g.<br/>for BLASTs {<span style=\" font-style:italic;\">A-B, A-C, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}</p><p>for BLASTs {<span style=\" font-style:italic;\">A-B, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}<br/><br/>When unchecked, only BLAST targets that share a direct connection are grouped.</p><p>e.g.<br/>for BLASTs {<span style=\" font-style:italic;\">A-B, A-C, B-C</span>} there is one group, {<span style=\" font-style:italic;\">A, B, C</span>}</p><p>for BLASTs {<span style=\" font-style:italic;\">A-B, B-C</span>} there are two groups, {<span style=\" font-style:italic;\">A, B</span>} and {<span style=\" font-style:italic;\">B, C</span>}<br/>This leads to more lines in the plot, which can be confusing, but allows non-transitive regions to be identified.</p><p><br/></p><p><br/></p></body></html>"))
        self.CHK_TRANSITION.setText(_translate("MainWindow", "Group all connections"))
        self.pushButton.setStatusTip(_translate("MainWindow", "Applys the current settings."))
        self.pushButton.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Applys the current settings.</p><p>The file is only reloaded if necessary.</p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))
        self.BTN_WHATS_THIS.setToolTip(_translate("MainWindow", "Click to display what\'s this help."))
        self.BTN_WHATS_THIS.setStatusTip(_translate("MainWindow", "Click to display what\'s this help."))
        self.BTN_WHATS_THIS.setWhatsThis(_translate("MainWindow", "Once in what\'s this mode, click somewhere else!"))
        self.BTN_WHATS_THIS.setText(_translate("MainWindow", "WHATS THIS?"))
        self.menu_File.setTitle(_translate("MainWindow", "&File"))
        self.action_Open.setText(_translate("MainWindow", "&Open..."))
        self.actionE_xit.setText(_translate("MainWindow", "E&xit"))

